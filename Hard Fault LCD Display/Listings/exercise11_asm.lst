


ARM Macro Assembler    Page 1 Program Title for Listing Header Goes Here


    1 00000000                 TTL              Program Title for Listing Header Goes Here
    2 00000000         ;****************************************************************
    3 00000000         ;Descriptive comment header goes here.
    4 00000000         ;(What does the program do?)
    5 00000000         ;Name:  Dhruv Rajpurohit
    6 00000000         ;Date:  04/16/2020
    7 00000000         ;Class:  CMPE-250
    8 00000000         ;Section:  01L1 Thursday 2pm to 3:35pm
    9 00000000         ;---------------------------------------------------------------
   10 00000000         ;Keil Template for KL46 Assembly with Keil C startup
   11 00000000         ;R. W. Melton
   12 00000000         ;November 13, 2017
   13 00000000         ;****************************************************************
   14 00000000         ;Assembler directives
   15 00000000                 THUMB
   16 00000000                 GBLL             MIXED_ASM_C
   17 00000000 TRUE     
                       MIXED_ASM_C
                               SETL             {TRUE}
   19 00000000         ;****************************************************************
   20 00000000         ;Include files
   21 00000000                 GET              MKL46Z4.s   ;Included by start.s
   23 00000000         ;****************************************************************
   24 00000000         ;EQUates
   25 00000000         ;NVIC_ICER
   26 00000000         ;31-00:CLRENA=masks for HW IRQ sources;
   27 00000000         ;             read:   0 = unmasked;   1 = masked
   28 00000000         ;             write:  0 = no effect;  1 = mask
   29 00000000         ;22:PIT IRQ mask
   30 00000000         ;12:UART0 IRQ mask
   31 00000000 00400000 
                       NVIC_ICER_PIT_MASK
                               EQU              PIT_IRQ_MASK
   32 00000000 00001000 
                       NVIC_ICER_UART0_MASK
                               EQU              UART0_IRQ_MASK
   33 00000000         ;---------------------------------------------------------------
   34 00000000         ;NVIC_ICPR
   35 00000000         ;31-00:CLRPEND=pending status for HW IRQ sources;
   36 00000000         ;             read:   0 = not pending;  1 = pending
   37 00000000         ;             write:  0 = no effect;
   38 00000000         ;                     1 = change status to not pending



ARM Macro Assembler    Page 2 Program Title for Listing Header Goes Here


   39 00000000         ;22:PIT IRQ pending status
   40 00000000         ;12:UART0 IRQ pending status
   41 00000000 00400000 
                       NVIC_ICPR_PIT_MASK
                               EQU              PIT_IRQ_MASK
   42 00000000 00001000 
                       NVIC_ICPR_UART0_MASK
                               EQU              UART0_IRQ_MASK
   43 00000000         ;---------------------------------------------------------------
   44 00000000         ;NVIC_IPR0-NVIC_IPR7
   45 00000000         ;2-bit priority:  00 = highest; 11 = lowest
   46 00000000         ;--PIT
   47 00000000 00000000 
                       PIT_IRQ_PRIORITY
                               EQU              0
   48 00000000 00C00000 
                       NVIC_IPR_PIT_MASK
                               EQU              (3 << PIT_PRI_POS)
   49 00000000 00000000 
                       NVIC_IPR_PIT_PRI_0
                               EQU              (PIT_IRQ_PRIORITY << UART0_PRI_POS)
   50 00000000         ;--UART0
   51 00000000 00000003 
                       UART0_IRQ_PRIORITY
                               EQU              3
   52 00000000 000000C0 
                       NVIC_IPR_UART0_MASK
                               EQU              (3 << UART0_PRI_POS)
   53 00000000 000000C0 
                       NVIC_IPR_UART0_PRI_3
                               EQU              (UART0_IRQ_PRIORITY << UART0_PRI_POS)
   54 00000000         ;---------------------------------------------------------------
   55 00000000         ;NVIC_ISER
   56 00000000         ;31-00:SETENA=masks for HW IRQ sources;
   57 00000000         ;             read:   0 = masked;     1 = unmasked
   58 00000000         ;             write:  0 = no effect;  1 = unmask
   59 00000000         ;22:PIT IRQ mask
   60 00000000         ;12:UART0 IRQ mask
   61 00000000 00400000 
                       NVIC_ISER_PIT_MASK
                               EQU              PIT_IRQ_MASK
   62 00000000 00001000 



ARM Macro Assembler    Page 3 Program Title for Listing Header Goes Here


                       NVIC_ISER_UART0_MASK
                               EQU              UART0_IRQ_MASK
   63 00000000         ;---------------------------------------------------------------
   64 00000000         ;PIT_LDVALn:  PIT load value register n
   65 00000000         ;31-00:TSV=timer start value (period in clock cycles - 1)
   66 00000000         ;Clock ticks for 0.01 s at 24 MHz count rate
   67 00000000         ;0.01 s * 24,000,000 Hz = 240,000
   68 00000000         ;TSV = 240,000 - 1
   69 00000000 0003A97F 
                       PIT_LDVAL_10ms
                               EQU              239999
   70 00000000         ;---------------------------------------------------------------
   71 00000000         ;PIT_MCR:  PIT module control register
   72 00000000         ;1-->    0:FRZ=freeze (continue'/stop in debug mode)
   73 00000000         ;0-->    1:MDIS=module disable (PIT section)
   74 00000000         ;               RTI timer not affected
   75 00000000         ;               must be enabled before any other PIT setup
   76 00000000 00000001 
                       PIT_MCR_EN_FRZ
                               EQU              PIT_MCR_FRZ_MASK
   77 00000000         ;---------------------------------------------------------------
   78 00000000         ;PIT_TCTRLn:  PIT timer control register n
   79 00000000         ;0-->   2:CHN=chain mode (enable)
   80 00000000         ;1-->   1:TIE=timer interrupt enable
   81 00000000         ;1-->   0:TEN=timer enable
   82 00000000 00000003 
                       PIT_TCTRL_CH_IE
                               EQU              (PIT_TCTRL_TEN_MASK :OR: PIT_TCTRL_TIE_MASK)
   83 00000000         ;---------------------------------------------------------------
   84 00000000         ;****************************************************************
   85 00000000         ;---------------------------------------------------------------
   86 00000000         ;PORTx_PCRn (Port x pin control register n [for pin n])
   87 00000000         ;___->10-08:Pin mux control (select 0 to 8)
   88 00000000         ;Use provided PORT_PCR_MUX_SELECT_2_MASK
   89 00000000         ;---------------------------------------------------------------
   90 00000000         ;Port A
   92 00000000 01000200 
                       PORT_PCR_SET_PTA1_UART0_RX
                               EQU              (PORT_PCR_ISF_MASK :OR:                                    PORT_PCR_MUX
_SELECT_2_MASK)
   94 00000000 01000200 
                       PORT_PCR_SET_PTA2_UART0_TX



ARM Macro Assembler    Page 4 Program Title for Listing Header Goes Here


                               EQU              (PORT_PCR_ISF_MASK :OR:                                    PORT_PCR_MUX
_SELECT_2_MASK)
   95 00000000         ;---------------------------------------------------------------
   96 00000000         ;SIM_SCGC4
   97 00000000         ;1->10:UART0 clock gate control (enabled)
   98 00000000         ;Use provided SIM_SCGC4_UART0_MASK
   99 00000000         ;---------------------------------------------------------------
  100 00000000         ;SIM_SCGC5
  101 00000000         ;1->09:Port A clock gate control (enabled)
  102 00000000         ;Use provided SIM_SCGC5_PORTA_MASK
  103 00000000         ;---------------------------------------------------------------
  104 00000000         ;SIM_SOPT2
  105 00000000         ;01=27-26:UART0SRC=UART0 clock source select
  106 00000000         ;         (PLLFLLSEL determines MCGFLLCLK' or MCGPLLCLK/2)
  107 00000000         ; 1=   16:PLLFLLSEL=PLL/FLL clock select (MCGPLLCLK/2)
  109 00000000 04000000 
                       SIM_SOPT2_UART0SRC_MCGPLLCLK
                               EQU              (1 << SIM_SOPT2_UART0SRC_SHIFT)
  111 00000000 04010000 
                       SIM_SOPT2_UART0_MCGPLLCLK_DIV2
                               EQU              (SIM_SOPT2_UART0SRC_MCGPLLCLK :OR: SIM_SOPT2_PLLFLLSEL_MASK)
  112 00000000         ;---------------------------------------------------------------
  113 00000000         ;SIM_SOPT5
  114 00000000         ; 0->   16:UART0 open drain enable (disabled)
  115 00000000         ; 0->   02:UART0 receive data select (UART0_RX)
  116 00000000         ;00->01-00:UART0 transmit data select source (UART0_TX)
  120 00000000 00010007 
                       SIM_SOPT5_UART0_EXTERN_MASK_CLEAR
                               EQU              (SIM_SOPT5_UART0ODE_MASK :OR:                                  SIM_SOPT
5_UART0RXSRC_MASK :OR:                                  SIM_SOPT5_UART0TXSRC_MASK)
  121 00000000         ;---------------------------------------------------------------
  122 00000000         ;UART0_BDH
  123 00000000         ;    0->  7:LIN break detect IE (disabled)
  124 00000000         ;    0->  6:RxD input active edge IE (disabled)
  125 00000000         ;    0->  5:Stop bit number select (1)
  126 00000000         ;00001->4-0:SBR[12:0] (UART0CLK / [9600 * (OSR + 1)]) 
  127 00000000         ;UART0CLK is MCGPLLCLK/2
  128 00000000         ;MCGPLLCLK is 96 MHz
  129 00000000         ;MCGPLLCLK/2 is 48 MHz
  130 00000000         ;SBR = 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
  131 00000000 00000001 
                       UART0_BDH_9600



ARM Macro Assembler    Page 5 Program Title for Listing Header Goes Here


                               EQU              0x01
  132 00000000         ;---------------------------------------------------------------
  133 00000000         ;UART0_BDL
  134 00000000         ;0x38->7-0:SBR[7:0] (UART0CLK / [9600 * (OSR + 1)])
  135 00000000         ;UART0CLK is MCGPLLCLK/2
  136 00000000         ;MCGPLLCLK is 96 MHz
  137 00000000         ;MCGPLLCLK/2 is 48 MHz
  138 00000000         ;SBR = 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
  139 00000000 00000038 
                       UART0_BDL_9600
                               EQU              0x38
  140 00000000         ;---------------------------------------------------------------
  141 00000000         ;UART0_C1
  142 00000000         ;0-->7:LOOPS=loops select (normal)
  143 00000000         ;0-->6:DOZEEN=doze enable (disabled)
  144 00000000         ;0-->5:RSRC=receiver source select (internal--no effect LOOPS=0)
  145 00000000         ;0-->4:M=9- or 8-bit mode select 
  146 00000000         ;        (1 start, 8 data [lsb first], 1 stop)
  147 00000000         ;0-->3:WAKE=receiver wakeup method select (idle)
  148 00000000         ;0-->2:IDLE=idle line type select (idle begins after start bit)
  149 00000000         ;0-->1:PE=parity enable (disabled)
  150 00000000         ;0-->0:PT=parity type (even parity--no effect PE=0)
  151 00000000 00000000 
                       UART0_C1_8N1
                               EQU              0x00
  152 00000000         ;---------------------------------------------------------------
  153 00000000         ;UART0_C2
  154 00000000         ;0-->7:TIE=transmit IE for TDRE (disabled)
  155 00000000         ;0-->6:TCIE=transmission complete IE for TC (disabled)
  156 00000000         ;0-->5:RIE=receiver IE for RDRF (disabled)
  157 00000000         ;0-->4:ILIE=idle line IE for IDLE (disabled)
  158 00000000         ;1-->3:TE=transmitter enable (enabled)
  159 00000000         ;1-->2:RE=receiver enable (enabled)
  160 00000000         ;0-->1:RWU=receiver wakeup control (normal)
  161 00000000         ;0-->0:SBK=send break (disabled, normal)
  162 00000000 0000000C 
                       UART0_C2_T_R
                               EQU              (UART0_C2_TE_MASK :OR: UART0_C2_RE_MASK)
  163 00000000 0000002C 
                       UART0_C2_T_RI
                               EQU              (UART0_C2_RIE_MASK :OR: UART0_C2_T_R)
  164 00000000 000000AC 



ARM Macro Assembler    Page 6 Program Title for Listing Header Goes Here


                       UART0_C2_TI_RI
                               EQU              (UART0_C2_TIE_MASK :OR: UART0_C2_T_RI)
  165 00000000         ;---------------------------------------------------------------
  166 00000000         ;UART0_C3
  167 00000000         ;0-->7:R8T9=9th data bit for receiver (not used M=0)
  168 00000000         ;           10th data bit for transmitter (not used M10=0)
  169 00000000         ;0-->6:R9T8=9th data bit for transmitter (not used M=0)
  170 00000000         ;           10th data bit for receiver (not used M10=0)
  171 00000000         ;0-->5:TXDIR=UART_TX pin direction in single-wire mode
  172 00000000         ;            (no effect LOOPS=0)
  173 00000000         ;0-->4:TXINV=transmit data inversion (not inverted)
  174 00000000         ;0-->3:ORIE=overrun IE for OR (disabled)
  175 00000000         ;0-->2:NEIE=noise error IE for NF (disabled)
  176 00000000         ;0-->1:FEIE=framing error IE for FE (disabled)
  177 00000000         ;0-->0:PEIE=parity error IE for PF (disabled)
  178 00000000 00000000 
                       UART0_C3_NO_TXINV
                               EQU              0x00
  179 00000000         ;---------------------------------------------------------------
  180 00000000         ;UART0_C4
  181 00000000         ;    0-->  7:MAEN1=match address mode enable 1 (disabled)
  182 00000000         ;    0-->  6:MAEN2=match address mode enable 2 (disabled)
  183 00000000         ;    0-->  5:M10=10-bit mode select (not selected)
  184 00000000         ;01111-->4-0:OSR=over sampling ratio (16)
  185 00000000         ;               = 1 + OSR for 3 <= OSR <= 31
  186 00000000         ;               = 16 for 0 <= OSR <= 2 (invalid values)
  187 00000000 0000000F 
                       UART0_C4_OSR_16
                               EQU              0x0F
  188 00000000 0000000F 
                       UART0_C4_NO_MATCH_OSR_16
                               EQU              UART0_C4_OSR_16
  189 00000000         ;---------------------------------------------------------------
  190 00000000         ;UART0_C5
  191 00000000         ;  0-->  7:TDMAE=transmitter DMA enable (disabled)
  192 00000000         ;  0-->  6:Reserved; read-only; always 0
  193 00000000         ;  0-->  5:RDMAE=receiver full DMA enable (disabled)
  194 00000000         ;000-->4-2:Reserved; read-only; always 0
  195 00000000         ;  0-->  1:BOTHEDGE=both edge sampling (rising edge only)
  196 00000000         ;  0-->  0:RESYNCDIS=resynchronization disable (enabled)
  197 00000000 00000000 
                       UART0_C5_NO_DMA_SSR_SYNC



ARM Macro Assembler    Page 7 Program Title for Listing Header Goes Here


                               EQU              0x00
  198 00000000         ;---------------------------------------------------------------
  199 00000000         ;UART0_S1
  200 00000000         ;0-->7:TDRE=transmit data register empty flag; read-only
  201 00000000         ;0-->6:TC=transmission complete flag; read-only
  202 00000000         ;0-->5:RDRF=receive data register full flag; read-only
  203 00000000         ;1-->4:IDLE=idle line flag; write 1 to clear (clear)
  204 00000000         ;1-->3:OR=receiver overrun flag; write 1 to clear (clear)
  205 00000000         ;1-->2:NF=noise flag; write 1 to clear (clear)
  206 00000000         ;1-->1:FE=framing error flag; write 1 to clear (clear)
  207 00000000         ;1-->0:PF=parity error flag; write 1 to clear (clear)
  212 00000000 0000001F 
                       UART0_S1_CLEAR_FLAGS
                               EQU              (UART0_S1_IDLE_MASK :OR:                              UART0_S1_OR_MASK 
:OR:                              UART0_S1_NF_MASK :OR:                              UART0_S1_FE_MASK :OR:           
                   UART0_S1_PF_MASK)
  213 00000000         ;---------------------------------------------------------------
  214 00000000         ;UART0_S2
  215 00000000         ;1-->7:LBKDIF=LIN break detect interrupt flag (clear)
  216 00000000         ;             write 1 to clear
  217 00000000         ;1-->6:RXEDGIF=RxD pin active edge interrupt flag (clear)
  218 00000000         ;              write 1 to clear
  219 00000000         ;0-->5:(reserved); read-only; always 0
  220 00000000         ;0-->4:RXINV=receive data inversion (disabled)
  221 00000000         ;0-->3:RWUID=receive wake-up idle detect
  222 00000000         ;0-->2:BRK13=break character generation length (10)
  223 00000000         ;0-->1:LBKDE=LIN break detect enable (disabled)
  224 00000000         ;0-->0:RAF=receiver active flag; read-only
  226 00000000 000000C0 
                       UART0_S2_NO_RXINV_BRK10_NO_LBKDETECT_CLEAR_FLAGS
                               EQU              (UART0_S2_LBKDIF_MASK :OR: UART0_S2_RXEDGIF_MASK)
  227 00000000         
  228 00000000         ; Equates for this lab
  229 00000000 00001A2C 
                       PWM_2ms EQU              TPM_CnV_PWM_DUTY_2ms
  230 00000000 00000BB8 
                       PWM_1ms EQU              TPM_CnV_PWM_DUTY_1ms
  231 00000000 00001A2C 
                       TPM_CnV_PWM_DUTY_2ms
                               EQU              6700
  232 00000000 00000BB8 
                       TPM_CnV_PWM_DUTY_1ms



ARM Macro Assembler    Page 8 Program Title for Listing Header Goes Here


                               EQU              3000
  233 00000000 00001000 
                       DAC0_STEPS
                               EQU              4096
  234 00000000 00000005 
                       SERVO_POSITIONS
                               EQU              5
  235 00000000         
  236 00000000         ; Equates for Queue Management Structure
  237 00000000 00000050 
                       MAX_BUFFER
                               EQU              80
  238 00000000 0000004F 
                       Safebuffer
                               EQU              79
  239 00000000 00000000 
                       IN_PTR  EQU              0
  240 00000000 00000004 
                       OUT_PTR EQU              4
  241 00000000 00000008 
                       BUF_STRT
                               EQU              8
  242 00000000 0000000C 
                       BUF_PAST
                               EQU              12
  243 00000000 00000010 
                       BUF_SIZE
                               EQU              16
  244 00000000 00000011 
                       NUM_ENQD
                               EQU              17
  245 00000000         
  246 00000000         ;Queue Structure Sizes
  247 00000000 00000004 
                       Q_BUF_SZ
                               EQU              4
  248 00000000 00000012 
                       Q_REC_SZ
                               EQU              18
  249 00000000         
  250 00000000         ;general
  251 00000000 0000000D 



ARM Macro Assembler    Page 9 Program Title for Listing Header Goes Here


                       CR      EQU              0x0D
  252 00000000 0000000A 
                       LF      EQU              0x0A
  253 00000000 00000000 
                       NULL    EQU              0x00
  254 00000000         
  255 00000000         ;****************************************************************
  256 00000000         ;MACROs
  257 00000000         ;****************************************************************
  258 00000000         ;Program
  259 00000000         ;C source will contain main ()
  260 00000000         ;Only subroutines and ISRs in this assembly source
  261 00000000                 AREA             MyCode,CODE,READONLY
  262 00000000                 EXPORT           Init_UART0_IRQ
  263 00000000                 EXPORT           UART0_IRQHandler
  264 00000000                 EXPORT           GetChar
  265 00000000                 EXPORT           PutChar
  266 00000000                 EXPORT           GetStringSB
  267 00000000                 EXPORT           PutStringSB
  268 00000000                 EXPORT           PutNumUB
  269 00000000                 EXPORT           PutNumHex
  270 00000000         ;>>>>> begin subroutine code <<<<<
  271 00000000         Init_UART0_IRQ
                               PROC             {R1-R14}
  272 00000000 B53F            PUSH             {R0-R5,LR}
  273 00000002 4826            LDR              R0,=RxQBuffer ; Load Queue Buffer address in R0
  274 00000004 4926            LDR              R1,=RxRecord ; Record structure is received
  275 00000006 2250            MOVS             R2,#MAX_BUFFER ; 80characters
  276 00000008 F7FF FFFE       BL               InitQueue   ; Initialize the Record Structure to be used with buffer  la
                                                            ter
  277 0000000C         
  278 0000000C 4825            LDR              R0,=TxQBuffer ; Load Address of Queue Buffer in R0
  279 0000000E 4926            LDR              R1,=TxRecord ; Transmit record structure
  280 00000010 2250            MOVS             R2,#MAX_BUFFER ;R2 characters
  281 00000012 F7FF FFFE       BL               InitQueue   ;Initialize the Record Structure to be used with buffer  lat
                                                            er
  282 00000016         
  283 00000016         ;Select MCGPLLCLK / 2 as UART0 clock source
  284 00000016 4925            LDR              R1,=SIM_SOPT2
  285 00000018 4A25            LDR              R2,=SIM_SOPT2_UART0SRC_MASK
  286 0000001A 680B            LDR              R3,[R1,#0]
  287 0000001C 4393            BICS             R3,R3,R2



ARM Macro Assembler    Page 10 Program Title for Listing Header Goes Here


  288 0000001E 4A25            LDR              R2,=SIM_SOPT2_UART0_MCGPLLCLK_DIV2
  289 00000020 4313            ORRS             R3,R3,R2
  290 00000022 600B            STR              R3,[R1,#0]
  291 00000024         ;Enable external connection for UART0
  292 00000024 4924            LDR              R1,=SIM_SOPT5
  293 00000026 4A25            LDR              R2,=SIM_SOPT5_UART0_EXTERN_MASK_CLEAR
  294 00000028 680B            LDR              R3,[R1,#0]
  295 0000002A 4393            BICS             R3,R3,R2
  296 0000002C 600B            STR              R3,[R1,#0]
  297 0000002E         ;Enable clock for UART0 module
  298 0000002E 4924            LDR              R1,=SIM_SCGC4
  299 00000030 4A24            LDR              R2,=SIM_SCGC4_UART0_MASK
  300 00000032 680B            LDR              R3,[R1,#0]
  301 00000034 4313            ORRS             R3,R3,R2
  302 00000036 600B            STR              R3,[R1,#0]
  303 00000038         ;Enable clock for Port A module
  304 00000038 4923            LDR              R1,=SIM_SCGC5
  305 0000003A 4A24            LDR              R2,= SIM_SCGC5_PORTA_MASK
  306 0000003C 680B            LDR              R3,[R1,#0]
  307 0000003E 4313            ORRS             R3,R3,R2
  308 00000040 600B            STR              R3,[R1,#0]
  309 00000042         ;UART0 Rx and UART0 Tx signals available through Port A to the OpenSDA connector
  310 00000042 4923            LDR              R1,=PORTA_PCR1
  311 00000044 4A23            LDR              R2,=PORT_PCR_SET_PTA1_UART0_RX
  312 00000046 600A            STR              R2,[R1,#0]
  313 00000048         ;Connect PORT A Pin 2 (PTA2) to UART0 Tx (J1 Pin 04)
  314 00000048 4923            LDR              R1,=PORTA_PCR2
  315 0000004A 4A22            LDR              R2,=PORT_PCR_SET_PTA2_UART0_TX
  316 0000004C 600A            STR              R2,[R1,#0]
  317 0000004E         
  318 0000004E         
  319 0000004E         ;Disable UART0 receiver and transmitter
  320 0000004E 4923            LDR              R1,=UART0_BASE
  321 00000050 220C            MOVS             R2,#UART0_C2_T_R
  322 00000052 78CB            LDRB             R3,[R1,#UART0_C2_OFFSET]
  323 00000054 4393            BICS             R3,R3,R2
  324 00000056 70CB            STRB             R3,[R1,#UART0_C2_OFFSET]
  325 00000058         
  326 00000058         ;Set UART0 IRQ priority
  327 00000058 4821            LDR              R0,=UART0_IPR
  328 0000005A 4922            LDR              R1,=NVIC_IPR_UART0_MASK
  329 0000005C 4A21            LDR              R2,=NVIC_IPR_UART0_PRI_3



ARM Macro Assembler    Page 11 Program Title for Listing Header Goes Here


  330 0000005E 6803            LDR              R3,[R0,#0]
  331 00000060 438B            BICS             R3,R3,R1
  332 00000062 4313            ORRS             R3,R3,R2
  333 00000064 6003            STR              R3,[R0,#0]
  334 00000066         
  335 00000066         ;Clear any pending UART0 interrupts
  336 00000066 4820            LDR              R0,=NVIC_ICPR
  337 00000068 4920            LDR              R1,=NVIC_ICPR_UART0_MASK
  338 0000006A 6001            STR              R1,[R0,#0]
  339 0000006C         
  340 0000006C         ;Unmask UART0 interrupts
  341 0000006C 4820            LDR              R0,=NVIC_ISER
  342 0000006E 491F            LDR              R1,=NVIC_ISER_UART0_MASK
  343 00000070 6001            STR              R1,[R0,#0]
  344 00000072         
  345 00000072         ;Set UART0 for 9600 baud, 8N1 protocol
  346 00000072 491A            LDR              R1,=UART0_BASE
  347 00000074 2201            MOVS             R2,#UART0_BDH_9600
  348 00000076 700A            STRB             R2,[R1,#UART0_BDH_OFFSET]
  349 00000078 2238            MOVS             R2,#UART0_BDL_9600
  350 0000007A 704A            STRB             R2,[R1,#UART0_BDL_OFFSET]
  351 0000007C 2200            MOVS             R2,#UART0_C1_8N1
  352 0000007E 708A            STRB             R2,[R1,#UART0_C1_OFFSET]
  353 00000080 2200            MOVS             R2,#UART0_C3_NO_TXINV
  354 00000082 718A            STRB             R2,[R1,#UART0_C3_OFFSET]
  355 00000084 220F            MOVS             R2,#UART0_C4_NO_MATCH_OSR_16
  356 00000086 728A            STRB             R2,[R1,#UART0_C4_OFFSET]
  357 00000088 2200            MOVS             R2,#UART0_C5_NO_DMA_SSR_SYNC
  358 0000008A 72CA            STRB             R2,[R1,#UART0_C5_OFFSET]
  359 0000008C 221F            MOVS             R2,#UART0_S1_CLEAR_FLAGS
  360 0000008E 710A            STRB             R2,[R1,#UART0_S1_OFFSET]
  362 00000090 22C0            MOVS             R2,                   #UART0_S2_NO_RXINV_BRK10_NO_LBKDETECT_CLEAR_FLAGS
  363 00000092 714A            STRB             R2,[R1,#UART0_S2_OFFSET]
  364 00000094         
  365 00000094         ;Enable receive interrupt
  366 00000094 222C            MOVS             R2,#UART0_C2_T_RI
  367 00000096 70CA            STRB             R2,[R1,#UART0_C2_OFFSET]
  368 00000098 BD3F            POP              {R0-R5,PC}
  369 0000009A                 ENDP
  370 0000009A 00 00 00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 12 Program Title for Listing Header Goes Here


              00000000 
              40048004 
              0C000000 
              04010000 
              40048010 
              00010007 
              40048034 
              00000400 
              40048038 
              00000200 
              40049004 
              01000200 
              40049008 
              4006A000 
              E000E40C 
              000000C0 
              E000E280 
              00001000 
              E000E100         LTORG
  371 000000F4         
  372 000000F4         
  373 000000F4         UART0_IRQHandler
  374 000000F4         UART0_ISR
                               PROC             {R0-R14}
  375 000000F4         ;Initialising Inetrrupt Service routine
  376 000000F4 B672            CPSID            I
  377 000000F6 B5F0            PUSH             {R4-R7,LR}
  378 000000F8         
  379 000000F8 4996            LDR              R1,=UART0_BASE
  380 000000FA 2280            MOVS             R2,#UART0_C2_TIE_MASK
  381 000000FC 78CB            LDRB             R3,[R1,#UART0_C2_OFFSET]
  382 000000FE 401A            ANDS             R2,R2,R3
  383 00000100 D00D            BEQ              Disabled
  384 00000102 790A            LDRB             R2,[R1,#UART0_S1_OFFSET]
  385 00000104 2480            MOVS             R4,#UART0_S1_TDRE_MASK
  386 00000106 4022            ANDS             R2,R2,R4
  387 00000108 D009            BEQ              Disabled
  388 0000010A 4993            LDR              R1,=TxRecord
  389 0000010C F7FF FFFE       BL               DeQueue
  390 00000110 D202            BCS              Disable
  391 00000112 4990            LDR              R1,=UART0_BASE
  392 00000114 71C8            STRB             R0,[R1,#UART0_D_OFFSET]



ARM Macro Assembler    Page 13 Program Title for Listing Header Goes Here


  393 00000116 E002            B                Disabled
  394 00000118         Disable
  395 00000118 498E            LDR              R1,=UART0_BASE
  396 0000011A 252C            MOVS             R5,#UART0_C2_T_RI
  397 0000011C 70CD            STRB             R5,[R1,#UART0_C2_OFFSET]
  398 0000011E         
  399 0000011E         Disabled
  400 0000011E 790A            LDRB             R2,[R1,#UART0_S1_OFFSET]
  401 00000120 2420            MOVS             R4,#UART0_S1_RDRF_MASK
  402 00000122 4022            ANDS             R2,R2,R4
  403 00000124 D003            BEQ              final
  404 00000126 79C8            LDRB             R0,[R1,#UART0_D_OFFSET]
  405 00000128 498C            LDR              R1,=RxRecord
  406 0000012A F7FF FFFE       BL               EnQueue
  407 0000012E         final
  408 0000012E BDF0            POP              {R4-R7,PC}
  409 00000130 B662            CPSIE            I
  410 00000132                 ENDP
  411 00000132         
  412 00000132         
  413 00000132         GetChar PROC             {R1-R14}
  414 00000132         ;DeQueues Chracter from RxQueue
  415 00000132 B502            PUSH             {R1,LR}
  416 00000134         LoopGet
  417 00000134 B672            CPSID            I
  418 00000136 4989            LDR              R1,=RxRecord
  419 00000138 F7FF FFFE       BL               DeQueue
  420 0000013C B662            CPSIE            I
  421 0000013E D2F9            BCS              LoopGet
  422 00000140 BD02            POP              {R1,PC}
  423 00000142                 ENDP
  424 00000142         
  425 00000142         
  426 00000142         PutChar PROC             {R0-R14}
  427 00000142         ;EnQueues a character
  428 00000142         
  429 00000142 B507            PUSH             {R0-R2,LR}
  430 00000144         LoopPut
  431 00000144 B672            CPSID            I
  432 00000146 4984            LDR              R1,=TxRecord
  433 00000148 F7FF FFFE       BL               EnQueue
  434 0000014C B662            CPSIE            I



ARM Macro Assembler    Page 14 Program Title for Listing Header Goes Here


  435 0000014E D2F9            BCS              LoopPut
  436 00000150 4980            LDR              R1,=UART0_BASE
  437 00000152 22AC            MOVS             R2,#UART0_C2_TI_RI
  438 00000154 70CA            STRB             R2,[R1,#UART0_C2_OFFSET]
  439 00000156 BD07            POP              {R0-R2,PC}
  440 00000158                 ENDP
  441 00000158         
  442 00000158         
  443 00000158         InitQueue
                               PROC             {R3-R14}
  444 00000158 B407            PUSH             {R0-R2}
  445 0000015A 6008            STR              R0,[R1,#IN_PTR] ;Store Inpointer
  446 0000015C 6048            STR              R0,[R1,#OUT_PTR] ;Store Outpointer Qbuffer
  447 0000015E 6088            STR              R0,[R1,#BUF_STRT] ;Store Buffer Start
  448 00000160 2204            MOVS             R2,#Q_BUF_SZ ;Moving buffer size to R0
  449 00000162 1880            ADDS             R0,R0,R2
  450 00000164 60C8            STR              R0,[R1,#BUF_PAST] ;Store buffer past
  451 00000166 2000            MOVS             R0,#0
  452 00000168 7448            STRB             R0,[R1,#NUM_ENQD] ;Store register byte of number enqued
  453 0000016A BC07            POP              {R0-R2}
  454 0000016C 4770            BX               LR
  455 0000016E                 ENDP
  456 0000016E         
  457 0000016E         
  458 0000016E         EnQueue PROC             {R0-R14}
  459 0000016E         ; Character is enqueued in Qbuffer using pointers from Qrecord
  460 0000016E B43F            PUSH             {R0-R5}     ; Push into stack the registers being used
  461 00000170 7C4A            LDRB             R2,[R1,#NUM_ENQD] ;Loading Number Enqueued from Number Queue pointer
  462 00000172 2504            MOVS             R5,#Q_BUF_SZ ; move buffer size
  463 00000174 42AA            CMP              R2,R5       ;Comparing with buffer size
  464 00000176 D213            BHS              exit        ;If higher or same, exit
  465 00000178 680C            LDR              R4,[R1,#IN_PTR] ; Load address of INpointer
  466 0000017A 7020            STRB             R0,[R4,#0]  ; Storing character in queue at inpointer
  467 0000017C 1C52            ADDS             R2,R2,#1    ; Incrementing NUM enqueued
  468 0000017E 744A            STRB             R2,[R1,#NUM_ENQD] ; Storing incremented Value
  469 00000180 1C64            ADDS             R4,R4,#1    ;incrementing pointer value
  470 00000182 600C            STR              R4,[R1,#IN_PTR] ;Storing in memory with offset
  471 00000184 68CB            LDR              R3,[R1,#BUF_PAST] ; Loading bufferpast
  472 00000186 429C            CMP              R4,R3       ; Comparing with Pointer
  473 00000188 D207            BHS              branch      ; Branch if higer or same, In pointer - Buffer Past
  474 0000018A         ; Clear flag and return to indicate successful enqueue
  475 0000018A         carryclear



ARM Macro Assembler    Page 15 Program Title for Listing Header Goes Here


  476 0000018A F3EF 8000       MRS              R0,APSR
  477 0000018E 2120            MOVS             R1,#0x20
  478 00000190 0609            LSLS             R1,R1,#24
  479 00000192 4388            BICS             R0,R0,R1
  480 00000194 F380 8800       MSR              APSR,R0
  481 00000198 E009            B                return
  482 0000019A         branch
  483 0000019A         ; Circular FIFO
  484 0000019A 688C            LDR              R4,[R1,#BUF_STRT] ; Initialise inpointer as buffer start
  485 0000019C 600C            STR              R4,[R1,#IN_PTR] ;Storing bufferstart in inpointer
  486 0000019E E7F4            B                carryclear  ; branch to carry clear
  487 000001A0         ; Set Carry flag to denote failure in Enqueueing the character
  488 000001A0         exit
  489 000001A0 F3EF 8000       MRS              R0,APSR
  490 000001A4 2120            MOVS             R1,#0x20
  491 000001A6 0609            LSLS             R1,R1,#24
  492 000001A8 4308            ORRS             R0,R0,R1
  493 000001AA F380 8800       MSR              APSR,R0
  494 000001AE         ; Return from subroutine with either Carry flag set or cleared
  495 000001AE         return
  496 000001AE BC3F            POP              {R0-R5}     ; Empty stack
  497 000001B0 4770            BX               LR          ; Return
  498 000001B2                 ENDP
  499 000001B2         
  500 000001B2         
  501 000001B2         DeQueue PROC             {R1-R14}
  502 000001B2         ;Removes characters in queue in accordance with First in First out option
  503 000001B2         
  504 000001B2 B43E            PUSH             {R1-R5}
  505 000001B4 7C4A            LDRB             R2,[R1,#NUM_ENQD] ;Number enqueued value
  506 000001B6 2A00            CMP              R2,#0       ; Compared to zero to check if queue empty
  507 000001B8 D916            BLS              empty       ; this means Queue is empty
  508 000001BA 684B            LDR              R3,[R1,#OUT_PTR] ; get out pointer
  509 000001BC 7818            LDRB             R0,[R3,#0]  ; Get Character at Outpointer
  510 000001BE 2500            MOVS             R5,#0       ; move zero to R5
  511 000001C0 701D            STRB             R5,[R3,#0]  ; Store zero in OutPointer
  512 000001C2 1E52            SUBS             R2,R2,#1    ; Decrement NUmber enqueued
  513 000001C4 744A            STRB             R2,[R1,#NUM_ENQD] ; Store decremented value
  514 000001C6 1C5B            ADDS             R3,R3,#1    ;Incremenet    out pointer
  515 000001C8 604B            STR              R3,[R1,#OUT_PTR] ; Store out pointer
  516 000001CA 68CC            LDR              R4,[R1,#BUF_PAST] ; load buffer past // last of queue
  517 000001CC 42A3            CMP              R3,R4       ; Outpointer - Buffer Past



ARM Macro Assembler    Page 16 Program Title for Listing Header Goes Here


  518 000001CE D301            BLO              clearflag   ; if lower than zero, clear flag
  519 000001D0 688B            LDR              R3,[R1,#BUF_STRT] ; Initialize inpointer to buffer start
  520 000001D2 604B            STR              R3,[R1,#OUT_PTR] ; Storing buffer start as outpointer
  521 000001D4         clearflag
  522 000001D4         ; Successful dequeue// clear flag
  523 000001D4 B401            PUSH             {R0}
  524 000001D6 F3EF 8000       MRS              R0,APSR
  525 000001DA 2120            MOVS             R1,#0x20
  526 000001DC 0609            LSLS             R1,R1,#24
  527 000001DE 4388            BICS             R0,R0,R1
  528 000001E0 F380 8800       MSR              APSR,R0
  529 000001E4 BC01            POP              {R0}
  530 000001E6 E006            B                return1
  531 000001E8         empty
  532 000001E8         ;SetFlag since no element to be dequeued // or Queue Empty
  533 000001E8 F3EF 8000       MRS              R0,APSR
  534 000001EC 2120            MOVS             R1,#0x20
  535 000001EE 0609            LSLS             R1,R1,#24
  536 000001F0 4308            ORRS             R0,R0,R1
  537 000001F2 F380 8800       MSR              APSR,R0
  538 000001F6         return1
  539 000001F6         ; Return with C falg set or Cleared
  540 000001F6 BC3E            POP              {R1-R5}
  541 000001F8 4770            BX               LR
  542 000001FA                 ENDP
  543 000001FA         
  544 000001FA         
  545 000001FA         GetStringSB
                               PROC             {R0-R13},{}
  546 000001FA         
  547 000001FA B50F            PUSH             {R0-R3,LR}
  548 000001FC 2300            MOVS             R3,#0
  549 000001FE 0004            MOVS             R4,R0
  550 00000200 1E49            SUBS             R1,R1,#1
  551 00000202 F7FF FFFE       BL               GetChar
  552 00000206         While
  553 00000206 280D            CMP              R0,#CR
  554 00000208 D00E            BEQ              nextline
  555 0000020A 1C5B            ADDS             R3,R3,#1
  556 0000020C 428B            CMP              R3,R1
  557 0000020E D806            BHI              EndWhile
  558 00000210 F7FF FFFE       BL               PutChar



ARM Macro Assembler    Page 17 Program Title for Listing Header Goes Here


  559 00000214 7020            STRB             R0,[R4,#0]
  560 00000216 1C64            ADDS             R4,R4,#1
  561 00000218 F7FF FFFE       BL               GetChar
  562 0000021C E7F3            B                While
  563 0000021E         EndWhile
  564 0000021E F7FF FFFE       BL               GetChar
  565 00000222 280D            CMP              R0,#CR
  566 00000224 D000            BEQ              nextline
  567 00000226 E7FA            B                EndWhile
  568 00000228         nextline
  569 00000228 2000            MOVS             R0,#NULL
  570 0000022A F7FF FFFE       BL               PutChar
  571 0000022E 7020            STRB             R0,[R4,#0]
  572 00000230 200D            MOVS             R0,#CR
  573 00000232 F7FF FFFE       BL               PutChar
  574 00000236 200A            MOVS             R0,#LF
  575 00000238 F7FF FFFE       BL               PutChar
  576 0000023C BD0F            POP              {R0-R3,PC}
  577 0000023E 4770            BX               LR
  578 00000240                 ENDP
  579 00000240         
  580 00000240         PutStringSB
                               PROC             {R0-R13},{}
  581 00000240         
  582 00000240 B51E            PUSH             {R1-R4,LR}
  583 00000242 2400            MOVS             R4,#0
  584 00000244 7802    Whileloop
                               LDRB             R2,[R0,#0]
  585 00000246 2A00            CMP              R2,#NULL
  586 00000248 D009            BEQ              EndWhileLoop
  587 0000024A 1C64            ADDS             R4,R4,#1
  588 0000024C 428C            CMP              R4,R1
  589 0000024E D206            BHS              EndWhileLoop
  590 00000250 B401            PUSH             {R0}
  591 00000252 0010            MOVS             R0,R2
  592 00000254 F7FF FFFE       BL               PutChar
  593 00000258 BC01            POP              {R0}
  594 0000025A 1C40            ADDS             R0,R0,#1
  595 0000025C E7F2            B                Whileloop
  596 0000025E         EndWhileLoop
  597 0000025E BD1E            POP              {R1-R4,PC}
  598 00000260 4770            BX               LR



ARM Macro Assembler    Page 18 Program Title for Listing Header Goes Here


  599 00000262                 ENDP
  600 00000262         
  601 00000262         
  602 00000262         
  603 00000262         PutNumU PROC             {R0-R15}
  604 00000262         
  605 00000262 B51F            PUSH             {R0-R4,LR}
  606 00000264 2400            MOVS             R4,#0
  607 00000266         Loop_DIVU
  608 00000266 0001            MOVS             R1,R0
  609 00000268 200A            MOVS             R0,#10
  610 0000026A F7FF FFFE       BL               DIVU
  611 0000026E B402            PUSH             {R1}
  612 00000270 1C64            ADDS             R4,R4,#1
  613 00000272 2800            CMP              R0,#0
  614 00000274 D000            BEQ              print
  615 00000276 E7F6            B                Loop_DIVU
  616 00000278         
  617 00000278         
  618 00000278         print
  619 00000278 2C00            CMP              R4,#0
  620 0000027A D006            BEQ              out
  621 0000027C BC02            POP              {R1}
  622 0000027E 3130            ADDS             R1,R1,#0x30
  623 00000280 0008            MOVS             R0,R1
  624 00000282 F7FF FFFE       BL               PutChar
  625 00000286 1E64            SUBS             R4,R4,#1
  626 00000288 E7F6            B                print
  627 0000028A         out
  628 0000028A BD1F            POP              {R0-R4,PC}
  629 0000028C 4770            BX               LR
  630 0000028E                 ENDP
  631 0000028E         
  632 0000028E         
  633 0000028E         DIVU    PROC             {R3-R14}
  634 0000028E B404            PUSH             {R2}
  635 00000290 2800            CMP              R0, #0
  636 00000292 D013            BEQ              DIV_BY_Zero
  637 00000294         
  638 00000294         
  639 00000294 2900            CMP              R1, #0
  640 00000296 D007            BEQ              SMALL_Div



ARM Macro Assembler    Page 19 Program Title for Listing Header Goes Here


  641 00000298         
  642 00000298 2200            MOVS             R2, #0
  643 0000029A 4281            CMP              R1, R0
  644 0000029C D016            BEQ              Equal
  645 0000029E         
  646 0000029E 4281    SUB_LOOP
                               CMP              R1, R0
  647 000002A0 D323            BLO              ENDW
  648 000002A2 1A09            SUBS             R1, R1, R0
  649 000002A4 1C52            ADDS             R2, R2, #1
  650 000002A6 E7FA            B                SUB_LOOP
  651 000002A8         
  652 000002A8         SMALL_Div
  653 000002A8 F3EF 8000       MRS              R0,APSR
  654 000002AC 2120            MOVS             R1,#0x20
  655 000002AE 0609            LSLS             R1,R1,#24
  656 000002B0 4388            BICS             R0,R0,R1
  657 000002B2 F380 8800       MSR              APSR,R0
  658 000002B6         
  659 000002B6 2000            MOVS             R0, #0
  660 000002B8 2100            MOVS             R1, #0
  661 000002BA E023            B                THEEND
  662 000002BC         DIV_BY_Zero
  663 000002BC         
  664 000002BC F3EF 8000       MRS              R0, APSR
  665 000002C0 2120            MOVS             R1,#0x20
  666 000002C2 0609            LSLS             R1,R1,#24
  667 000002C4 4308            ORRS             R0,R0,R1
  668 000002C6 F380 8800       MSR              APSR,R0
  669 000002CA         
  670 000002CA E01B            B                THEEND
  671 000002CC         
  672 000002CC 1A09    Equal   SUBS             R1, R1, R0
  673 000002CE 1C52            ADDS             R2, R2, #1
  674 000002D0 4610            MOV              R0, R2
  675 000002D2 B402            PUSH             {R1}
  676 000002D4 B401            PUSH             {R0}
  677 000002D6 F3EF 8000       MRS              R0,APSR
  678 000002DA 2120            MOVS             R1,#0x20
  679 000002DC 0609            LSLS             R1,R1,#24
  680 000002DE 4388            BICS             R0,R0,R1
  681 000002E0 F380 8800       MSR              APSR,R0



ARM Macro Assembler    Page 20 Program Title for Listing Header Goes Here


  682 000002E4 BC02            POP              {R1}
  683 000002E6 BC01            POP              {R0}
  684 000002E8 E00C            B                THEEND
  685 000002EA         
  686 000002EA         ENDW
  687 000002EA 4610            MOV              R0, R2
  688 000002EC B402            PUSH             {R1}
  689 000002EE B401            PUSH             {R0}
  690 000002F0 F3EF 8000       MRS              R0,APSR
  691 000002F4 2120            MOVS             R1,#0x20
  692 000002F6 0609            LSLS             R1,R1,#24
  693 000002F8 4388            BICS             R0,R0,R1
  694 000002FA F380 8800       MSR              APSR,R0
  695 000002FE BC02            POP              {R1}
  696 00000300 BC01            POP              {R0}
  697 00000302 E7FF            B                THEEND
  698 00000304         
  699 00000304 BC04    THEEND  POP              {R2}
  700 00000306 4770            BX               LR
  701 00000308         
  702 00000308         
  703 00000308         
  704 00000308         PutNumHex
                               PROC             {R0-R15}
  705 00000308         ; Prints the text decimal represenation of unsigned word value in R0
  706 00000308         
  707 00000308 B50E            PUSH             {R1-R3,LR}
  708 0000030A 2300            MOVS             R3,#0       ;initalize counter
  709 0000030C 220F            MOVS             R2,#0x0000000F ; prepare mask
  710 0000030E 0001            MOVS             R1,R0       ; move word in R1
  711 00000310 0004            MOVS             R4,R0       ; move Word in R4
  712 00000312         shift
  713 00000312 2B08            CMP              R3,#8       ; Since we know 8 character will be there
  714 00000314 D00C            BEQ              printhex    ; compare if 8 Characters are printed
  715 00000316 4014            ANDS             R4,R4,R2    ; AND Word with mask
  716 00000318 0020            MOVS             R0,R4       ; Move character in R0
  717 0000031A 1C5B            ADDS             R3,R3,#1    ; incrememnt Counter
  718 0000031C 2809            CMP              R0,#9       ; Compare if character is a number
  719 0000031E DC01            BGT              alpha       ; otehrwise alpha
  720 00000320 3030            ADDS             R0,R0,#48   ; Convert character into Number ASCII
  721 00000322 E001            B                pushstack   ; Push the chracter into Stack
  722 00000324 3037    alpha   ADDS             R0,R0,#55   ; Convert the character into alphabet ( ASCII )



ARM Macro Assembler    Page 21 Program Title for Listing Header Goes Here


  723 00000326 E7FF            B                pushstack   ; Push into Stack
  724 00000328         pushstack
  725 00000328 B401            PUSH{R0}                     ; Push into stack to be used later
  726 0000032A 0909            LSRS             R1,R1,#4    ; Left shift the word by 4bits to find next character
  727 0000032C 000C            MOVS             R4,R1       ; Move shift address into R4
  728 0000032E E7F0            B                shift       ; go back to shift again with new R4
  729 00000330         ; Prints the characters in stack
  730 00000330         printhex
  731 00000330 2B00            CMP              R3,#0       ; Check for number of characters printed
  732 00000332 D004            BEQ              printfin    ; if all printed, return
  733 00000334 BC01            POP              {R0}        ; pop the last character stacked
  734 00000336 F7FF FFFE       BL               PutChar     ; print this charcter
  735 0000033A 1E5B            SUBS             R3,R3,#1    ; decrement character
  736 0000033C E7F8            B                printhex    ; branch back to print next character
  737 0000033E         printfin
  738 0000033E BD0E            POP              {R1-R3,PC}  ; empty stack to return
  739 00000340 4770            BX               LR
  740 00000342                 ENDP
  741 00000342         
  742 00000342         
  743 00000342         
  744 00000342         PutNumUB
                               PROC             {R0-R15}
  745 00000342         ; Prints to the terminal screen the text decimal representation of unsigned byte value in R0
  746 00000342 B507            PUSH             {R0-R2,LR}
  747 00000344 0001            MOVS             R1,R0       ;Move Byte in R1 from R0 // precautionary
  748 00000346 220F            MOVS             R2,#0x0000000F ; Move mask in R2
  749 00000348 4011            ANDS             R1,R1,R2    ; AND operation to preserve the least byte of word
  750 0000034A 0008            MOVS             R0,R1       ; Move Least bye in R0
  751 0000034C F7FF FFFE       BL               PutNumU     ; Call PutNumU
  752 00000350 BD07            POP              {R0-R2,PC}  ; Empty Stack
  753 00000352 4770            BX               LR          ; return
  754 00000354                 ENDP
  755 00000354         
  756 00000354         ;>>>>>   end subroutine code <<<<<
  757 00000354                 ALIGN
  758 00000354         ;**********************************************************************
  759 00000354         ;Constants
  760 00000354 4006A000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 22 Program Title for Listing Header Goes Here


              00000000         AREA             MyConst,DATA,READONLY
  761 00000000                 EXPORT           DAC0_table_0
  762 00000000                 EXPORT           PWM_duty_table_0
  763 00000000         ;>>>>> begin constants here <<<<<
  764 00000000         DAC0_table_0
  765 00000000         DAC0_table
  766 00000000 99 01           DCW              ((DAC0_STEPS - 1) / (SERVO_POSITIONS * 2))
  767 00000002 CC 04           DCW              (((DAC0_STEPS - 1) * 3) / (SERVO_POSITIONS * 2))
  768 00000004 FF 07           DCW              (((DAC0_STEPS - 1) * 5) / (SERVO_POSITIONS * 2))
  769 00000006 32 0B           DCW              (((DAC0_STEPS - 1) * 7) / (SERVO_POSITIONS * 2))
  770 00000008 65 0E           DCW              (((DAC0_STEPS - 1) * 9) / (SERVO_POSITIONS * 2))
  771 0000000A         
  772 0000000A         PWM_duty_table
  773 0000000A         PWM_duty_table_0
  774 0000000A         ;Servo positions
  775 0000000A 2C 1A           DCW              PWM_2ms
  776 0000000C 8F 16           DCW              ((3*(PWM_2ms-PWM_1ms)/4)+PWM_1ms)
  777 0000000E F2 12           DCW              (((PWM_2ms-PWM_1ms)/2)+PWM_1ms)
  778 00000010 55 0F           DCW              (((PWM_2ms-PWM_1ms)/4)+PWM_1ms)
  779 00000012 B8 0B           DCW              PWM_1ms
  780 00000014         
  781 00000014         ;>>>>>   end constants here <<<<<
  782 00000014         ;**********************************************************************
  783 00000014         ;Variables
  784 00000014                 AREA             MyData,DATA,READWRITE
  785 00000000         ;>>>>> begin variables here <<<<<
  786 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 23 Program Title for Listing Header Goes Here


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    RxQBuffer
                               SPACE            MAX_BUFFER
  787 00000050                 ALIGN
  788 00000050 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 RxRecord
                               SPACE            Q_REC_SZ
  789 00000062 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 24 Program Title for Listing Header Goes Here


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    TxQBuffer
                               SPACE            MAX_BUFFER
  790 000000B2 00 00           ALIGN
  791 000000B4 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 TxRecord
                               SPACE            Q_REC_SZ
  792 000000C6 00 00 00 
              00       QBuffer SPACE            Q_BUF_SZ
  793 000000CA 00 00           ALIGN
  794 000000CC 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 QRecord SPACE            Q_REC_SZ
  795 000000DE 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 25 Program Title for Listing Header Goes Here


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    Bufferstring
                               SPACE            MAX_BUFFER
  796 0000012E         
  797 0000012E         ;>>>>>   end variables here <<<<<
  798 0000012E                 END
Command Line: --debug --length=49 --width=120 --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=interwork --depend=.\objects\
exercise11_asm.d -o.\objects\exercise11_asm.o -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:
\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.14.0\Device\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION
 SETA 524" --predefine="_RTE_ SETA 1" --predefine="MKL46Z256xxx4 SETA 1" --list=.\listings\exercise11_asm.lst Exercise11
_ASM.s

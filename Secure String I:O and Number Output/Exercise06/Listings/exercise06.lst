


ARM Macro Assembler    Page 1 Exercise 6


    1 00000000                 TTL              Exercise 6
    2 00000000         ;*******************************************************
                       *********
    3 00000000         ;This program uses UART and GetChar,PutChar
    4 00000000         ;This program encrypts using Ceaser cipher logic and use
                       s PutChar,GetChar with UART to display on a terminal
    5 00000000         ;Name:  Dhruv Rajpurohit
    6 00000000         ;Date:  02/20/2020
    7 00000000         ;Class:  CMPE-250
    8 00000000         ;Section: 01L1, Thursday 11:00 - 13:00
    9 00000000         ;-------------------------------------------------------
                       --------
   10 00000000         ;Keil Template for KL46
   11 00000000         ;R. W. Melton
   12 00000000         ;February 5, 2018
   13 00000000         ;*******************************************************
                       *********
   14 00000000         ;Assembler directives
   15 00000000                 THUMB
   17 00000000         ;*******************************************************
                       *********
   18 00000000         ;Include files
   19 00000000                 GET              MKL46Z4.s   ;Included by start.
                                                            s
   21 00000000         ;*******************************************************
                       *********
   22 00000000         ;EQUates
   23 00000000         ;-------------------------------------------------------
                       --------
   24 00000000         ;Characters
   25 00000000 0000000D 
                       CR      EQU              0x0D
   26 00000000 0000000A 
                       LF      EQU              0x0A
   27 00000000 00000000 
                       NULL    EQU              0x00
   28 00000000         ;
   29 00000000         ;-------------------------------------------------------
                       --------
   30 00000000         ;PORTx_PCRn (Port x pin control register n [for pin n])
   31 00000000         ;___->10-08:Pin mux control (select 0 to 8)
   32 00000000         ;Use provided PORT_PCR_MUX_SELECT_2_MASK
   33 00000000         ;-------------------------------------------------------
                       --------
   34 00000000         ;Port A// Configuring to be used through open SDA port f
                       or external sessions// Clock selection and enabling
   35 00000000         ;Pin1 connected to Rx pin and Pin2 connected to Txpin
   37 00000000 01000200 
                       PORT_PCR_SET_PTA1_UART0_RX
                               EQU              (PORT_PCR_ISF_MASK :OR:       
                             PORT_PCR_MUX_SELECT_2_MASK)
   39 00000000 01000200 
                       PORT_PCR_SET_PTA2_UART0_TX
                               EQU              (PORT_PCR_ISF_MASK :OR:       
                             PORT_PCR_MUX_SELECT_2_MASK)
   40 00000000         ;-------------------------------------------------------
                       --------
   41 00000000         ;SIM_SCGC4
   42 00000000         ;1->10:UART0 clock gate control (enabled)



ARM Macro Assembler    Page 2 Exercise 6


   43 00000000         ;Use provided SIM_SCGC4_UART0_MASK
   44 00000000         ;-------------------------------------------------------
                       --------
   45 00000000         ;SIM_SCGC5
   46 00000000         ;1->09:Port A clock gate control (enabled)
   47 00000000         ;Use provided SIM_SCGC5_PORTA_MASK
   48 00000000         ;-------------------------------------------------------
                       --------
   49 00000000         ;SIM_SOPT2
   50 00000000         ;01=27-26:UART0SRC=UART0 clock source select
   51 00000000         ;         (PLLFLLSEL determines MCGFLLCLK' or MCGPLLCLK/
                       2)
   52 00000000         ; 1=   16:PLLFLLSEL=PLL/FLL clock select (MCGPLLCLK/2)
   53 00000000         ;-------------------------------------------------------
                       --------
   55 00000000 04000000 
                       SIM_SOPT2_UART0SRC_MCGPLLCLK
                               EQU              (1 << SIM_SOPT2_UART0SRC_SHIFT)
   57 00000000 04010000 
                       SIM_SOPT2_UART0_MCGPLLCLK_DIV2
                               EQU              (SIM_SOPT2_UART0SRC_MCGPLLCLK :
OR: SIM_SOPT2_PLLFLLSEL_MASK)
   58 00000000         ;-------------------------------------------------------
                       --------
   59 00000000         ;SIM_SOPT5
   60 00000000         ; 0->   16:UART0 open drain enable (disabled)
   61 00000000         ; 0->   02:UART0 receive data select (UART0_RX)
   62 00000000         ;00->01-00:UART0 transmit data select source (UART0_TX)
   66 00000000 00010007 
                       SIM_SOPT5_UART0_EXTERN_MASK_CLEAR
                               EQU              (SIM_SOPT5_UART0ODE_MASK :OR:  
                                SIM_SOPT5_UART0RXSRC_MASK :OR:               
                   SIM_SOPT5_UART0TXSRC_MASK)
   67 00000000         ;-------------------------------------------------------
                       --------
   68 00000000         ;UART0_BDH
   69 00000000         ;    0->  7:LIN break detect IE (disabled)
   70 00000000         ;    0->  6:RxD input active edge IE (disabled)
   71 00000000         ;    0->  5:Stop bit number select (1)
   72 00000000         ;00001->4-0:SBR[12:0] (UART0CLK / [9600 * (OSR + 1)])
   73 00000000         ;UART0CLK is MCGPLLCLK/2
   74 00000000         ;MCGPLLCLK is 96 MHz
   75 00000000         ;MCGPLLCLK/2 is 48 MHz
   76 00000000         ;SBR = 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
   77 00000000         ; For 9600 Baud Rate, high mark 0x01
   78 00000000 00000001 
                       UART0_BDH_9600
                               EQU              0x01
   79 00000000         ;-------------------------------------------------------
                       --------
   80 00000000         ;UART0_BDL
   81 00000000         ;26->7-0:SBR[7:0] (UART0CLK / [9600 * (OSR + 1)])
   82 00000000         ;UART0CLK is MCGPLLCLK/2
   83 00000000         ;MCGPLLCLK is 96 MHz
   84 00000000         ;MCGPLLCLK/2 is 48 MHz
   85 00000000         ;SBR = 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
   86 00000000         ;9600 baud rate, low mark 0x38
   87 00000000 00000038 
                       UART0_BDL_9600



ARM Macro Assembler    Page 3 Exercise 6


                               EQU              0x38
   88 00000000         ;-------------------------------------------------------
                       --------
   89 00000000         ;UART0_C1
   90 00000000         ;0-->7:LOOPS=loops select (normal)
   91 00000000         ;0-->6:DOZEEN=doze enable (disabled)
   92 00000000         ;0-->5:RSRC=receiver source select (internal--no effect 
                       LOOPS=0)
   93 00000000         ;0-->4:M=9- or 8-bit mode select
   94 00000000         ;        (1 start, 8 data [lsb first], 1 stop)
   95 00000000         ;0-->3:WAKE=receiver wakeup method select (idle)
   96 00000000         ;0-->2:IDLE=idle line type select (idle begins after sta
                       rt bit)
   97 00000000         ;0-->1:PE=parity enable (disabled)
   98 00000000         ;0-->0:PT=parity type (even parity--no effect PE=0)
   99 00000000 00000000 
                       UART0_C1_8N1
                               EQU              0x00
  100 00000000         ;-------------------------------------------------------
                       --------
  101 00000000         ;UART0_C2
  102 00000000         ;0-->7:TIE=transmit IE for TDRE (disabled)
  103 00000000         ;0-->6:TCIE=transmission complete IE for TC (disabled)
  104 00000000         ;0-->5:RIE=receiver IE for RDRF (disabled)
  105 00000000         ;0-->4:ILIE=idle line IE for IDLE (disabled)
  106 00000000         ;1-->3:TE=transmitter enable (enabled)
  107 00000000         ;1-->2:RE=receiver enable (enabled)
  108 00000000         ;0-->1:RWU=receiver wakeup control (normal)
  109 00000000         ;0-->0:SBK=send break (disabled, normal)
  110 00000000 0000000C 
                       UART0_C2_T_R
                               EQU              (UART0_C2_TE_MASK :OR: UART0_C2
_RE_MASK)
  111 00000000         ;-------------------------------------------------------
                       --------
  112 00000000         ;UART0_C3
  113 00000000         ;0-->7:R8T9=9th data bit for receiver (not used M=0)
  114 00000000         ;           10th data bit for transmitter (not used M10=
                       0)
  115 00000000         ;0-->6:R9T8=9th data bit for transmitter (not used M=0)
  116 00000000         ;           10th data bit for receiver (not used M10=0)
  117 00000000         ;0-->5:TXDIR=UART_TX pin direction in single-wire mode
  118 00000000         ;            (no effect LOOPS=0)
  119 00000000         ;0-->4:TXINV=transmit data inversion (not inverted)
  120 00000000         ;0-->3:ORIE=overrun IE for OR (disabled)
  121 00000000         ;0-->2:NEIE=noise error IE for NF (disabled)
  122 00000000         ;0-->1:FEIE=framing error IE for FE (disabled)
  123 00000000         ;0-->0:PEIE=parity error IE for PF (disabled)
  124 00000000 00000000 
                       UART0_C3_NO_TXINV
                               EQU              0x00
  125 00000000         ;-------------------------------------------------------
                       --------
  126 00000000         ;UART0_C4
  127 00000000         ;    0-->  7:MAEN1=match address mode enable 1 (disabled
                       )
  128 00000000         ;    0-->  6:MAEN2=match address mode enable 2 (disabled
                       )
  129 00000000         ;    0-->  5:M10=10-bit mode select (not selected)



ARM Macro Assembler    Page 4 Exercise 6


  130 00000000         ;01111-->4-0:OSR=over sampling ratio (16)
  131 00000000         ;               = 1 + OSR for 3 <= OSR <= 31
  132 00000000         ;               = 16 for 0 <= OSR <= 2 (invalid values)
  133 00000000 0000000F 
                       UART0_C4_OSR_16
                               EQU              0x0F
  134 00000000 0000000F 
                       UART0_C4_NO_MATCH_OSR_16
                               EQU              UART0_C4_OSR_16
  135 00000000         ;-------------------------------------------------------
                       --------
  136 00000000         ;UART0_C5
  137 00000000         ;  0-->  7:TDMAE=transmitter DMA enable (disabled)
  138 00000000         ;  0-->  6:Reserved; read-only; always 0
  139 00000000         ;  0-->  5:RDMAE=receiver full DMA enable (disabled)
  140 00000000         ;000-->4-2:Reserved; read-only; always 0
  141 00000000         ;  0-->  1:BOTHEDGE=both edge sampling (rising edge only
                       )
  142 00000000         ;  0-->  0:RESYNCDIS=resynchronization disable (enabled)
                       
  143 00000000 00000000 
                       UART0_C5_NO_DMA_SSR_SYNC
                               EQU              0x00
  144 00000000         ;-------------------------------------------------------
                       --------
  145 00000000         ;UART0_S1
  146 00000000         ;0-->7:TDRE=transmit data register empty flag; read-only
                       
  147 00000000         ;0-->6:TC=transmission complete flag; read-only
  148 00000000         ;0-->5:RDRF=receive data register full flag; read-only
  149 00000000         ;1-->4:IDLE=idle line flag; write 1 to clear (clear)
  150 00000000         ;1-->3:OR=receiver overrun flag; write 1 to clear (clear
                       )
  151 00000000         ;1-->2:NF=noise flag; write 1 to clear (clear)
  152 00000000         ;1-->1:FE=framing error flag; write 1 to clear (clear)
  153 00000000         ;1-->0:PF=parity error flag; write 1 to clear (clear)
  158 00000000 0000001F 
                       UART0_S1_CLEAR_FLAGS
                               EQU              (UART0_S1_IDLE_MASK :OR:      
                        UART0_S1_OR_MASK :OR:                              UAR
T0_S1_NF_MASK :OR:                              UART0_S1_FE_MASK :OR:        
                      UART0_S1_PF_MASK)
  159 00000000         ;-------------------------------------------------------
                       --------
  160 00000000         ;UART0_S2
  161 00000000         ;1-->7:LBKDIF=LIN break detect interrupt flag (clear)
  162 00000000         ;             write 1 to clear
  163 00000000         ;1-->6:RXEDGIF=RxD pin active edge interrupt flag (clear
                       )
  164 00000000         ;              write 1 to clear
  165 00000000         ;0-->5:(reserved); read-only; always 0
  166 00000000         ;0-->4:RXINV=receive data inversion (disabled)
  167 00000000         ;0-->3:RWUID=receive wake-up idle detect
  168 00000000         ;0-->2:BRK13=break character generation length (10)
  169 00000000         ;0-->1:LBKDE=LIN break detect enable (disabled)
  170 00000000         ;0-->0:RAF=receiver active flag; read-only
  172 00000000 000000C0 
                       UART0_S2_NO_RXINV_BRK10_NO_LBKDETECT_CLEAR_FLAGS
                               EQU              (UART0_S2_LBKDIF_MASK :OR: UART



ARM Macro Assembler    Page 5 Exercise 6


0_S2_RXEDGIF_MASK)
  173 00000000         
  174 00000000 0000004F 
                       MAX_STRING
                               EQU              79
  175 00000000         ;-------------------------------------------------------
                       --------
  176 00000000         ;-------------------------------------------------------
                       ------
  177 00000000         ;*******************************************************
                       *********
  178 00000000         ;Program
  179 00000000         ;Linker requires Reset_Handler
  180 00000000                 AREA             MyCode,CODE,READONLY
  181 00000000                 ENTRY
  182 00000000                 EXPORT           Reset_Handler
  183 00000000                 IMPORT           Startup
  184 00000000                 IMPORT           LengthStringSB
  185 00000000         Reset_Handler
                               PROC             {}
  186 00000000         main
  187 00000000         ;-------------------------------------------------------
                       --------
  188 00000000         ;Mask interrupts
  189 00000000 B672            CPSID            I
  190 00000002         ;KL46 system startup with 48-MHz system clock
  191 00000002 F7FF FFFE       BL               Startup     ;This subroutine ca
                                                            lls SetClock48MHZ s
                                                            ubroutine which con
                                                            figures MCG to be u
                                                            sed.
  192 00000006         ;-------------------------------------------------------
                       --------
  193 00000006         ;>>>>> begin main program code <<<<<
  194 00000006 F7FF FFFE       BL               INIT_UART0_POLLING
  195 0000000A         Step2
  196 0000000A 214F            MOVS             R1,#MAX_STRING
  197 0000000C 4898            LDR              R0,=String1
  198 0000000E F7FF FFFE       BL               PutStringSB
  199 00000012 F7FF FFFE 
                       branchback
                               BL               GetChar
  200 00000016 F7FF FFFE       BL               PutChar
  201 0000001A         
  202 0000001A 2867            CMP              R0,#103
  203 0000001C D016            BEQ              BackG
  204 0000001E 2869            CMP              R0,#105
  205 00000020 D022            BEQ              BackI
  206 00000022 286C            CMP              R0,#108
  207 00000024 D02A            BEQ              BackL
  208 00000026 2870            CMP              R0,#112
  209 00000028 D03E            BEQ              BackP
  210 0000002A         
  211 0000002A 2847            CMP              R0,#71
  212 0000002C D006            BEQ              G
  213 0000002E 2849            CMP              R0,#73
  214 00000030 D006            BEQ              I
  215 00000032 284C            CMP              R0,#76
  216 00000034 D006            BEQ              L



ARM Macro Assembler    Page 6 Exercise 6


  217 00000036 2850            CMP              R0,#80
  218 00000038 D006            BEQ              P
  219 0000003A E7EA            B                branchback
  220 0000003C         
  221 0000003C 2067    G       MOVS             R0,#103
  222 0000003E E005            B                BackG
  223 00000040 2069    I       MOVS             R0,#105
  224 00000042 E011            B                BackI
  225 00000044 206C    L       MOVS             R0,#108
  226 00000046 E019            B                BackL
  227 00000048 2070    P       MOVS             R0,#112
  228 0000004A E02D            B                BackP
  229 0000004C         
  230 0000004C         
  231 0000004C         BackG
  232 0000004C 200D            MOVS             R0,#CR
  233 0000004E F7FF FFFE       BL               PutChar
  234 00000052 200A            MOVS             R0,#LF
  235 00000054 F7FF FFFE       BL               PutChar
  236 00000058 203C            MOVS             R0,#60
  237 0000005A F7FF FFFE       BL               PutChar
  238 0000005E 4885            LDR              R0,=String2
  239 00000060 214F            MOVS             R1,#MAX_STRING
  240 00000062 F7FF FFFE       BL               GetStringSB
  241 00000066         
  242 00000066 E7D0            B                Step2
  243 00000068         
  244 00000068         BackI
  245 00000068 4882            LDR              R0,=String2
  246 0000006A 2100            MOVS             R1,#NULL
  247 0000006C 7001            STRB             R1,[R0,#0]
  248 0000006E 200D            MOVS             R0,#CR
  249 00000070 F7FF FFFE       BL               PutChar
  250 00000074 200A            MOVS             R0,#LF
  251 00000076 F7FF FFFE       BL               PutChar
  252 0000007A E7C6            B                Step2
  253 0000007C         
  254 0000007C         BackL
  255 0000007C 200D            MOVS             R0,#CR
  256 0000007E F7FF FFFE       BL               PutChar
  257 00000082 200A            MOVS             R0,#LF
  258 00000084 F7FF FFFE       BL               PutChar
  259 00000088 487B            LDR              R0,=Length
  260 0000008A F7FF FFFE       BL               PutStringSB
  261 0000008E 4879            LDR              R0,=String2
  262 00000090 214F            MOVS             R1,#MAX_STRING
  263 00000092 F7FF FFFE       BL               LengthStringSB
  264 00000096 F7FF FFFE       BL               PutNumU
  265 0000009A 200D            MOVS             R0,#CR
  266 0000009C F7FF FFFE       BL               PutChar
  267 000000A0 200A            MOVS             R0,#LF
  268 000000A2 F7FF FFFE       BL               PutChar
  269 000000A6 E7B0            B                Step2
  270 000000A8         
  271 000000A8 200D    BackP   MOVS             R0,#CR
  272 000000AA F7FF FFFE       BL               PutChar
  273 000000AE 200A            MOVS             R0,#LF
  274 000000B0 F7FF FFFE       BL               PutChar
  275 000000B4 203E            MOVS             R0,#62



ARM Macro Assembler    Page 7 Exercise 6


  276 000000B6 F7FF FFFE       BL               PutChar
  277 000000BA 486E            LDR              R0,=String2
  278 000000BC F7FF FFFE       BL               PutStringSB
  279 000000C0 203E            MOVS             R0,#62
  280 000000C2 F7FF FFFE       BL               PutChar
  281 000000C6 200D            MOVS             R0,#CR
  282 000000C8 F7FF FFFE       BL               PutChar
  283 000000CC 200A            MOVS             R0,#LF
  284 000000CE F7FF FFFE       BL               PutChar
  285 000000D2 E79A            B                Step2
  286 000000D4         
  287 000000D4         
  288 000000D4         ;>>>>>   end main program code <<<<<
  289 000000D4         ;Stay here
  290 000000D4 E7FE            B                .
  291 000000D6                 ENDP
  292 000000D6         ;>>>>> begin subroutine code <<<<<
  293 000000D6         INIT_UART0_POLLING
                               PROC             {R4-R14}
  294 000000D6 486C            LDR              R0,=SIM_SOPT2
  295 000000D8 496C            LDR              R1,=SIM_SOPT2_UART0SRC_MASK
  296 000000DA 6802            LDR              R2,[R0,#0]
  297 000000DC 438A            BICS             R2,R2,R1
  298 000000DE 496C            LDR              R1,=SIM_SOPT2_UART0_MCGPLLCLK_D
IV2
  299 000000E0 430A            ORRS             R2,R2,R1
  300 000000E2 6002            STR              R2,[R0,#0]
  301 000000E4 486B            LDR              R0,=SIM_SOPT5
  302 000000E6 496C            LDR              R1,=SIM_SOPT5_UART0_EXTERN_MASK
_CLEAR
  303 000000E8 6802            LDR              R2,[R0,#0]
  304 000000EA 438A            BICS             R2,R2,R1
  305 000000EC 6002            STR              R2,[R0,#0]
  306 000000EE 486B            LDR              R0,=SIM_SCGC4
  307 000000F0 496B            LDR              R1,=SIM_SCGC4_UART0_MASK
  308 000000F2 6802            LDR              R2,[R0,#0]
  309 000000F4 430A            ORRS             R2,R2,R1
  310 000000F6 6002            STR              R2,[R0,#0]
  311 000000F8 486A            LDR              R0,=SIM_SCGC5
  312 000000FA 496B            LDR              R1,=SIM_SCGC5_PORTA_MASK
  313 000000FC 6802            LDR              R2,[R0,#0]
  314 000000FE 430A            ORRS             R2,R2,R1
  315 00000100 6002            STR              R2,[R0,#0]
  316 00000102 486A            LDR              R0,=PORTA_PCR1
  317 00000104 496A            LDR              R1,=PORT_PCR_SET_PTA1_UART0_RX
  318 00000106 6001            STR              R1,[R0,#0]
  319 00000108 486A            LDR              R0,=PORTA_PCR2
  320 0000010A 4969            LDR              R1,=PORT_PCR_SET_PTA2_UART0_TX
  321 0000010C 6001            STR              R1,[R0,#0]
  322 0000010E 486A            LDR              R0,=UART0_BASE
  323 00000110 210C            MOVS             R1,#UART0_C2_T_R
  324 00000112 78C2            LDRB             R2,[R0,#UART0_C2_OFFSET]
  325 00000114 438A            BICS             R2,R2,R1
  326 00000116 70C2            STRB             R2,[R0,#UART0_C2_OFFSET]
  327 00000118 2101            MOVS             R1,#UART0_BDH_9600
  328 0000011A 7001            STRB             R1,[R0,#UART0_BDH_OFFSET]
  329 0000011C 2138            MOVS             R1,#UART0_BDL_9600
  330 0000011E 7041            STRB             R1,[R0,#UART0_BDL_OFFSET]
  331 00000120 2100            MOVS             R1,#UART0_C1_8N1



ARM Macro Assembler    Page 8 Exercise 6


  332 00000122 7081            STRB             R1,[R0,#UART0_C1_OFFSET]
  333 00000124 2100            MOVS             R1,#UART0_C3_NO_TXINV
  334 00000126 7181            STRB             R1,[R0,#UART0_C3_OFFSET]
  335 00000128 210F            MOVS             R1,#UART0_C4_NO_MATCH_OSR_16
  336 0000012A 7281            STRB             R1,[R0,#UART0_C4_OFFSET]
  337 0000012C 2100            MOVS             R1,#UART0_C5_NO_DMA_SSR_SYNC
  338 0000012E 72C1            STRB             R1,[R0,#UART0_C5_OFFSET]
  339 00000130 211F            MOVS             R1,#UART0_S1_CLEAR_FLAGS
  340 00000132 7101            STRB             R1,[R0,#UART0_S1_OFFSET]
  341 00000134 21C0            MOVS             R1,#UART0_S2_NO_RXINV_BRK10_NO_
LBKDETECT_CLEAR_FLAGS
  342 00000136 7141            STRB             R1,[R0,#UART0_S2_OFFSET]
  343 00000138 210C            MOVS             R1,#UART0_C2_T_R
  344 0000013A 70C1            STRB             R1,[R0,#UART0_C2_OFFSET]
  345 0000013C 4770            BX               LR
  346 0000013E         
  347 0000013E                 ENDP
  348 0000013E         
  349 0000013E         GetChar PROC             {R4-R14}
  350 0000013E B40F            PUSH{R0-R3}
  351 00000140         ;poll RDRF until UART0 ready to receive
  352 00000140 495D            LDR              R1,=UART0_BASE
  353 00000142 2220            MOVS             R2,#UART0_S1_RDRF_MASK
  354 00000144 790B    PollRx  LDRB             R3,[R1,#UART0_S1_OFFSET]
  355 00000146 4013            ANDS             R3,R3,R2
  356 00000148 D0FC            BEQ              PollRx      ;Receive character 
                                                            and store in R0
  357 0000014A 79C8            LDRB             R0,[R1,#UART0_D_OFFSET]
  358 0000014C 4770            BX               LR
  359 0000014E                 ENDP
  360 0000014E         
  361 0000014E         PutChar PROC             {R4-R14}
  362 0000014E B40F            PUSH{R0-R3}
  363 00000150         ;Poll TDRE until UART0 ready to transmit
  364 00000150 4959            LDR              R1,=UART0_BASE
  365 00000152 2280            MOVS             R2,#UART0_S1_TDRE_MASK
  366 00000154 790B    PollTx  LDRB             R3,[R1,#UART0_S1_OFFSET]
  367 00000156 4013            ANDS             R3,R3,R2
  368 00000158 D0FC            BEQ              PollTx      ;Transmit character
                                                             stored in R0
  369 0000015A 71C8            STRB             R0,[R1,#UART0_D_OFFSET]
  370 0000015C BC0F            POP              {R0-R3}
  371 0000015E 4770            BX               LR
  372 00000160                 ENDP
  373 00000160         
  374 00000160         GetStringSB
                               PROC             {R0-R13},{}
  375 00000160         
  376 00000160 B50F            PUSH             {R0-R3,LR}
  377 00000162 2300            MOVS             R3,#0
  378 00000164 0004            MOVS             R4,R0
  379 00000166 1E49            SUBS             R1,R1,#1
  380 00000168 F7FF FFFE       BL               GetChar
  381 0000016C         While
  382 0000016C 280D            CMP              R0,#CR
  383 0000016E D00E            BEQ              nextline
  384 00000170 1C5B            ADDS             R3,R3,#1
  385 00000172 428B            CMP              R3,R1
  386 00000174 D806            BHI              EndWhile



ARM Macro Assembler    Page 9 Exercise 6


  387 00000176 F7FF FFFE       BL               PutChar
  388 0000017A 7020            STRB             R0,[R4,#0]
  389 0000017C 1C64            ADDS             R4,R4,#1
  390 0000017E F7FF FFFE       BL               GetChar
  391 00000182 E7F3            B                While
  392 00000184         EndWhile
  393 00000184 F7FF FFFE       BL               GetChar
  394 00000188 280D            CMP              R0,#CR
  395 0000018A D000            BEQ              nextline
  396 0000018C E7FA            B                EndWhile
  397 0000018E         nextline
  398 0000018E 2000            MOVS             R0,#NULL
  399 00000190 F7FF FFFE       BL               PutChar
  400 00000194 7020            STRB             R0,[R4,#0]
  401 00000196 200D            MOVS             R0,#CR
  402 00000198 F7FF FFFE       BL               PutChar
  403 0000019C 200A            MOVS             R0,#LF
  404 0000019E F7FF FFFE       BL               PutChar
  405 000001A2 BD0F            POP              {R0-R3,PC}
  406 000001A4 4770            BX               LR
  407 000001A6                 ENDP
  408 000001A6         
  409 000001A6         PutStringSB
                               PROC             {R0-R13},{}
  410 000001A6         
  411 000001A6 B51E            PUSH             {R1-R4,LR}
  412 000001A8 2400            MOVS             R4,#0
  413 000001AA 7802    Whileloop
                               LDRB             R2,[R0,#0]
  414 000001AC 2A00            CMP              R2,#NULL
  415 000001AE D009            BEQ              EndWhileLoop
  416 000001B0 1C64            ADDS             R4,R4,#1
  417 000001B2 428C            CMP              R4,R1
  418 000001B4 D206            BHS              EndWhileLoop
  419 000001B6 B401            PUSH             {R0}
  420 000001B8 0010            MOVS             R0,R2
  421 000001BA F7FF FFFE       BL               PutChar
  422 000001BE BC01            POP              {R0}
  423 000001C0 1C40            ADDS             R0,R0,#1
  424 000001C2 E7F2            B                Whileloop
  425 000001C4         EndWhileLoop
  426 000001C4 BD1E            POP              {R1-R4,PC}
  427 000001C6 4770            BX               LR
  428 000001C8                 ENDP
  429 000001C8         
  430 000001C8         
  431 000001C8         
  432 000001C8         PutNumU PROC             {R0-R15}
  433 000001C8         
  434 000001C8 B51F            PUSH             {R0-R4,LR}
  435 000001CA 2400            MOVS             R4,#0
  436 000001CC         Loop_DIVU
  437 000001CC 0001            MOVS             R1,R0
  438 000001CE 200A            MOVS             R0,#10
  439 000001D0 F7FF FFFE       BL               DIVU
  440 000001D4 B402            PUSH             {R1}
  441 000001D6 1C64            ADDS             R4,R4,#1
  442 000001D8 2800            CMP              R0,#0
  443 000001DA D000            BEQ              print



ARM Macro Assembler    Page 10 Exercise 6


  444 000001DC E7F6            B                Loop_DIVU
  445 000001DE         
  446 000001DE         
  447 000001DE         print
  448 000001DE 2C00            CMP              R4,#0
  449 000001E0 D006            BEQ              out
  450 000001E2 BC02            POP              {R1}
  451 000001E4 3130            ADDS             R1,R1,#0x30
  452 000001E6 0008            MOVS             R0,R1
  453 000001E8 F7FF FFFE       BL               PutChar
  454 000001EC 1E64            SUBS             R4,R4,#1
  455 000001EE E7F6            B                print
  456 000001F0         out
  457 000001F0 BD1F            POP              {R0-R4,PC}
  458 000001F2 4770            BX               LR
  459 000001F4                 ENDP
  460 000001F4         
  461 000001F4         DIVU    PROC             {R3-R14}
  462 000001F4 B404            PUSH             {R2}
  463 000001F6 2800            CMP              R0, #0
  464 000001F8 D013            BEQ              DIV_BY_Zero
  465 000001FA         
  466 000001FA         
  467 000001FA 2900            CMP              R1, #0
  468 000001FC D007            BEQ              SMALL_Div
  469 000001FE         
  470 000001FE 2200            MOVS             R2, #0
  471 00000200 4281            CMP              R1, R0
  472 00000202 D016            BEQ              Equal
  473 00000204         
  474 00000204 4281    SUB_LOOP
                               CMP              R1, R0
  475 00000206 D323            BLO              ENDW
  476 00000208 1A09            SUBS             R1, R1, R0
  477 0000020A 1C52            ADDS             R2, R2, #1
  478 0000020C E7FA            B                SUB_LOOP
  479 0000020E         
  480 0000020E         SMALL_Div
  481 0000020E F3EF 8000       MRS              R0,APSR
  482 00000212 2120            MOVS             R1,#0x20
  483 00000214 0609            LSLS             R1,R1,#24
  484 00000216 4388            BICS             R0,R0,R1
  485 00000218 F380 8800       MSR              APSR,R0
  486 0000021C         
  487 0000021C 2000            MOVS             R0, #0
  488 0000021E 2100            MOVS             R1, #0
  489 00000220 E023            B                THEEND
  490 00000222         DIV_BY_Zero
  491 00000222         
  492 00000222 F3EF 8000       MRS              R0, APSR
  493 00000226 2120            MOVS             R1,#0x20
  494 00000228 0609            LSLS             R1,R1,#24
  495 0000022A 4308            ORRS             R0,R0,R1
  496 0000022C F380 8800       MSR              APSR,R0
  497 00000230         
  498 00000230 E01B            B                THEEND
  499 00000232         
  500 00000232 1A09    Equal   SUBS             R1, R1, R0
  501 00000234 1C52            ADDS             R2, R2, #1



ARM Macro Assembler    Page 11 Exercise 6


  502 00000236 4610            MOV              R0, R2
  503 00000238 B402            PUSH             {R1}
  504 0000023A B401            PUSH             {R0}
  505 0000023C F3EF 8000       MRS              R0,APSR
  506 00000240 2120            MOVS             R1,#0x20
  507 00000242 0609            LSLS             R1,R1,#24
  508 00000244 4388            BICS             R0,R0,R1
  509 00000246 F380 8800       MSR              APSR,R0
  510 0000024A BC02            POP              {R1}
  511 0000024C BC01            POP              {R0}
  512 0000024E E00C            B                THEEND
  513 00000250         
  514 00000250         ENDW
  515 00000250 4610            MOV              R0, R2
  516 00000252 B402            PUSH             {R1}
  517 00000254 B401            PUSH             {R0}
  518 00000256 F3EF 8000       MRS              R0,APSR
  519 0000025A 2120            MOVS             R1,#0x20
  520 0000025C 0609            LSLS             R1,R1,#24
  521 0000025E 4388            BICS             R0,R0,R1
  522 00000260 F380 8800       MSR              APSR,R0
  523 00000264 BC02            POP              {R1}
  524 00000266 BC01            POP              {R0}
  525 00000268 E7FF            B                THEEND
  526 0000026A         
  527 0000026A BC04    THEEND  POP              {R2}
  528 0000026C 4770            BX               LR
  529 0000026E         
  530 0000026E         
  531 0000026E         
  532 0000026E         ;>>>>>   end subroutine code <<<<<
  533 0000026E 00 00           ALIGN
  534 00000270         ;*******************************************************
                       *********
  535 00000270         ;Vector Table Mapped to Address 0 at Reset
  536 00000270         ;Linker requires __Vectors to be exported
  537 00000270 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              40048004 
              0C000000 
              04010000 
              40048010 
              00010007 
              40048034 
              00000400 
              40048038 
              00000200 
              40049004 
              01000200 
              40049008 
              4006A000         AREA             RESET, DATA, READONLY
  538 00000000                 EXPORT           __Vectors
  539 00000000                 EXPORT           __Vectors_End
  540 00000000                 EXPORT           __Vectors_Size
  541 00000000                 IMPORT           __initial_sp



ARM Macro Assembler    Page 12 Exercise 6


  542 00000000                 IMPORT           Dummy_Handler
  543 00000000                 IMPORT           HardFault_Handler
  544 00000000         __Vectors
  545 00000000         ;ARM core vectors
  546 00000000 00000000        DCD              __initial_sp ;00:end of stack
  547 00000004 00000000        DCD              Reset_Handler ;01:reset vector
  548 00000008 00000000        DCD              Dummy_Handler ;02:NMI
  549 0000000C 00000000        DCD              HardFault_Handler 
                                                            ;03:hard fault
  550 00000010 00000000        DCD              Dummy_Handler ;04:(reserved)
  551 00000014 00000000        DCD              Dummy_Handler ;05:(reserved)
  552 00000018 00000000        DCD              Dummy_Handler ;06:(reserved)
  553 0000001C 00000000        DCD              Dummy_Handler ;07:(reserved)
  554 00000020 00000000        DCD              Dummy_Handler ;08:(reserved)
  555 00000024 00000000        DCD              Dummy_Handler ;09:(reserved)
  556 00000028 00000000        DCD              Dummy_Handler ;10:(reserved)
  557 0000002C 00000000        DCD              Dummy_Handler ;11:SVCall (super
                                                            visor call)
  558 00000030 00000000        DCD              Dummy_Handler ;12:(reserved)
  559 00000034 00000000        DCD              Dummy_Handler ;13:(reserved)
  560 00000038 00000000        DCD              Dummy_Handler ;14:PendableSrvRe
                                                            q (pendable request
                                                            
  561 0000003C         ;   for system service)
  562 0000003C 00000000        DCD              Dummy_Handler ;15:SysTick (syst
                                                            em tick timer)
  563 00000040 00000000        DCD              Dummy_Handler ;16:DMA channel 0
                                                             xfer complete/erro
                                                            r
  564 00000044 00000000        DCD              Dummy_Handler ;17:DMA channel 1
                                                             xfer complete/erro
                                                            r
  565 00000048 00000000        DCD              Dummy_Handler ;18:DMA channel 2
                                                             xfer complete/erro
                                                            r
  566 0000004C 00000000        DCD              Dummy_Handler ;19:DMA channel 3
                                                             xfer complete/erro
                                                            r
  567 00000050 00000000        DCD              Dummy_Handler ;20:(reserved)
  568 00000054 00000000        DCD              Dummy_Handler ;21:command compl
                                                            ete; read collision
                                                            
  569 00000058 00000000        DCD              Dummy_Handler ;22:low-voltage d
                                                            etect;
  570 0000005C         ;   low-voltage warning
  571 0000005C 00000000        DCD              Dummy_Handler ;23:low leakage w
                                                            akeup
  572 00000060 00000000        DCD              Dummy_Handler ;24:I2C0
  573 00000064 00000000        DCD              Dummy_Handler ;25:I2C1
  574 00000068 00000000        DCD              Dummy_Handler ;26:SPI0 (all IRQ
                                                             sources)
  575 0000006C 00000000        DCD              Dummy_Handler ;27:SPI1 (all IRQ
                                                             sources)
  576 00000070 00000000        DCD              Dummy_Handler ;28:UART0 (status
                                                            ; error)
  577 00000074 00000000        DCD              Dummy_Handler ;29:UART1 (status
                                                            ; error)
  578 00000078 00000000        DCD              Dummy_Handler ;30:UART2 (status
                                                            ; error)



ARM Macro Assembler    Page 13 Exercise 6


  579 0000007C 00000000        DCD              Dummy_Handler ;31:ADC0
  580 00000080 00000000        DCD              Dummy_Handler ;32:CMP0
  581 00000084 00000000        DCD              Dummy_Handler ;33:TPM0
  582 00000088 00000000        DCD              Dummy_Handler ;34:TPM1
  583 0000008C 00000000        DCD              Dummy_Handler ;35:TPM2
  584 00000090 00000000        DCD              Dummy_Handler ;36:RTC (alarm)
  585 00000094 00000000        DCD              Dummy_Handler ;37:RTC (seconds)
                                                            
  586 00000098 00000000        DCD              Dummy_Handler ;38:PIT (all IRQ 
                                                            sources)
  587 0000009C 00000000        DCD              Dummy_Handler ;39:I2S0
  588 000000A0 00000000        DCD              Dummy_Handler ;40:USB0
  589 000000A4 00000000        DCD              Dummy_Handler ;41:DAC0
  590 000000A8 00000000        DCD              Dummy_Handler ;42:TSI0
  591 000000AC 00000000        DCD              Dummy_Handler ;43:MCG
  592 000000B0 00000000        DCD              Dummy_Handler ;44:LPTMR0
  593 000000B4 00000000        DCD              Dummy_Handler ;45:Segment LCD
  594 000000B8 00000000        DCD              Dummy_Handler ;46:PORTA pin det
                                                            ect
  595 000000BC 00000000        DCD              Dummy_Handler ;47:PORTC and POR
                                                            TD pin detect
  596 000000C0         __Vectors_End
  597 000000C0 000000C0 
                       __Vectors_Size
                               EQU              __Vectors_End - __Vectors
  598 000000C0                 ALIGN
  599 000000C0         ;*******************************************************
                       *********
  600 000000C0         ;Constants
  601 000000C0                 AREA             MyConst,DATA,READONLY
  602 00000000         ;>>>>> begin constants here <<<<<
  603 00000000 45 6E 74 
              65 72 20 
              61 20 53 
              74 72 69 
              6E 67 3A 
              00       String1 DCB              "Enter a String:",NULL
  604 00000010 4C 65 6E 
              67 74 68 
              3A 00    Length  DCB              "Length:",NULL
  605 00000018         ;>>>>>   end constants here <<<<<
  606 00000018                 ALIGN
  607 00000018         ;*******************************************************
                       *********
  608 00000018         ;Variables
  609 00000018                 AREA             MyData,DATA,READWRITE
  610 00000000         ;>>>>> begin variables here <<<<<
  611 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 14 Exercise 6


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       String2 SPACE            MAX_STRING
  612 0000004F         ;>>>>>   end variables here <<<<<
  613 0000004F 00              ALIGN
  614 00000050                 END
Command Line: --debug --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=interwork --
depend=.\objects\exercise06.d -o.\objects\exercise06.o -I.\RTE\_Target_1 -IC:\K
eil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.14.0\Device\Include -IC:\Keil_v5\ARM\CM
SIS\Include --predefine="__UVISION_VERSION SETA 524" --predefine="MKL46Z256xxx4
 SETA 1" --list=.\listings\exercise06.lst exercise06.s
